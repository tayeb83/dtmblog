---
layout: default
title: " إدارة الإصدارات-تثبيث و إعداد "
date: 2012-07-08 08:43
comments: true
categories: git, github, rails 
---
لتثبيث الGIT أنصحكم بتتبع الخطوات المشروحة بطريقة جيدة و مفصلة حسب نوع النظام على الرابط
 [http://git-scm.com/book/en/Getting-Started-Installing-Git](http://git-scm.com/book/en/Getting-Started-Installing-Git)  , على سبيل المثال تثبيث الGIT على نظام الأبونتو يتم بالأمر التالي :


```
sudo apt-get install git-core $
```  

بعد تثبيث الGIT, تأتي المرحلة التالية و التي نقوم فيها بتهيئة الإعدادات و هي عبارة عن إعدادات خاصة بالنظام أي أنكم لن تنفذوها إلا مرة واحدة على نفس النظام :


```
git-config --global user.name "الإسم" $
git-config --global user.email "البريد الإلكتروني" $
```  

تهيئة الإعدادات لل repository (المستودع)
------------------------------------
تشمل هذه المرحلة مجموعة من العمليات الضرورية لتشكيل الrepository, و الذي هو عبارة عن "ملف أو نظام تحكم" تُوضع فيه الإصدارات الخاصة بالتطبيق :


```
git init $
```


بعدها يجب إضافة الملفات داخل الrepository, ولكن يكمن هنا مشكل بسيط و هو أن الGIT يتبع التغيرات التي تطرأ على كل الملفات حتى تلك التي لا نريد تتبعها, أخص بالذكر ملفات الlog على سبيل المثال وذلك أن هذه الملفات تتغير بكثرة و لسنا بحاجة لأن يقوم نظام إدارة الإصدارات بتتبع تغيراتها. لحسن الحظ فإن الGIT لديه القدرة على تجاهل مثل هذه الملفات و ذلك بالطريقة التالية : 
نضف إلى الملف الرئيسي للتطبيق ملف إسمه gitignore. و الذي سوف يحتوي على بعض القواعد تحدد لGIT الملفات التي يجب تجاهلها, اﻵن لو عدنا إلى الدرس   [أول تطبيق برايلز](http://tayeb83.github.com/dtmdeblog/blog/2012/06/25/first-application-rails)  فسوف تلاحظون أن رايلز قام بإنشاء ملف gitignore. داخل الملف الرئيسي مثل ما توضحه الصورة :

<img src="/images/gitginoreinapplication.png" title="ملف gitignore. داخل الملف الرئيسي"/>

اﻵن لو فتحنا gitignore. فسوف تلاحظون أن الملف يحتوي على مجموعة من القواعد تجبر الGIT على تجاهل التغيرات التي تطرأ على ملفات الlog, الملفات المؤقتة و قاعدة البيانات sqllite.

<img src="/images/gitigorefile.png" title=" محتوى ملف gitignore."/>

الإضافة و الحفظ
--------------

و أخير وصلنا إلى المرحلة التي سوف نقوم من خلالها إضافة ملفات التطبيق إلى الGIT ثم حفظها (commit), يمكنكم إضافة كل الملفات (ماعدا التي تمت تجاهلها) بالطريقة التالية :

```
. git add  $
```

النقطة (.) هنا تمثل الملف الجاري و الGIT ذكي بما فيه الكفاية لكي يقوم بإضافة كل الملفات بطريقة الإستدعاء الذاتي. هذه العملية تقوم بإضافة الملفات إلى "ساحة التخزين" (staging area) و التي تحتوي على التغيرات المؤقتة على المشروع. يمكنكم رؤيتها عن طريق تنفيذ الأمر "git status"  كما هو موضح في الصورة :

<img src="/images/gitstatus.png"/>

اﻵن إذا أردتم حفظ هذه التغيرات و تأكيدها فيجب إستعمال الأمر "commit -m" بحيث أن الخاصية "m-" تسمح لكم بإضافة تعليق يوضح مثلا سبب التغيير.

ماذا يستطيع الGIT القيام به من أجل مساعدتكم
---------------------------------------

بعد كل ما قمنا به في هذا الدرس أعتقد أن الفائدة من إستعمال الGIT لم تظهر بعد, لهذا دعونا نقوم بعمل تطبيقي يوضح لنا الأمور أكثر. أول شيء سوف نقوم به هو تدمير الملف app/controllers, عملية يمكن أن يقوم بها أي مطور بطريق الخطأ. 


```
 cd first_app/ $
 rm -rf app/controllers $
```

لمعرفة ما حصل سوف نفوم بإرسال الأمر "git status". 

<img src="/images/gitstatusrmrfcontrollers.png"/>

الصورة توضح التغيرات التي حصلت ولكن ما يجب معرفته أن هذه التغيرات لم تحفظ بعد على الGIT و بالتالي فإن بإمكاننا إلغاءها بطريقة سهلة و ربط الGIT مع الإصدار اﻷخير عن طريق تنفيذ اﻷمر  "git chekout -f".

```
git checkout -f $
git status $
# On branch master
nothing to commit (working directory clean)
ls app/controllers/ $
application_controller.rb 
```   

الحمد لله الملف المحذوف عاد مجددا.


